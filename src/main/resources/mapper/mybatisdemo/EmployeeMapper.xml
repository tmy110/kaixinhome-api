<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.kaixin8848.home.web.mybatisdemo.dao.EmployeeMapper">
    <resultMap id="BaseResultMap" type="com.kaixin8848.home.web.mybatisdemo.model.Employee">
        <!--
          WARNING - @mbg.generated
        -->
        <id column="id" jdbcType="BIGINT" property="id"/>
        <result column="last_name" jdbcType="VARCHAR" property="lastName"/>
        <result column="gender" jdbcType="CHAR" property="gender"/>
        <result column="email" jdbcType="VARCHAR" property="email"/>
        <result column="d_id" jdbcType="BIGINT" property="dId"/>
    </resultMap>
    <!--场景一:查询Employee的同时查询员工对应的部门
    Employee===Dept
    一个员工有与之对应的部门信息
    select_resultMap_关联查询_级联属性封装结果
    -->
    <resultMap id="MyDifEmp" type="com.kaixin8848.home.web.mybatisdemo.pojo.out.EmployeeInfo" extends="BaseResultMap">
        <id column="did" jdbcType="BIGINT" property="dept.id"/>
        <result column="dept_name" jdbcType="VARCHAR" property="dept.deptName"/>
    </resultMap>
    <select id="getEmpAndDept" resultMap="MyDifEmp">
        SELECT e.id id ,e.last_name last_name,e.gender gender,
        e.email email,e.d_id d_id,
        d.id did,d.dept_name dept_name
        FROM employee e,dept d
        WHERE e.d_id=d.id
        AND e.id=#{id}
    </select>
    <!--select_resultMap_关联查询_association定义关联对象封装-->
    <resultMap id="MyDifEmp2" type="com.kaixin8848.home.web.mybatisdemo.pojo.out.EmployeeInfo" extends="BaseResultMap">
        <association property="dept" javaType="com.kaixin8848.home.web.mybatisdemo.model.Dept">
            <id column="did" jdbcType="BIGINT" property="id"/>
            <result column="dept_name" jdbcType="VARCHAR" property="deptName"/>
        </association>
    </resultMap>
    <select id="getEmpAndDept2" resultMap="MyDifEmp2">
        SELECT e.id id ,e.last_name last_name,e.gender gender,
        e.email email,e.d_id d_id,
        d.id did,d.dept_name dept_name
        FROM employee e,dept d
        WHERE e.d_id=d.id
        AND e.id=#{id}
    </select>
    <!--select_resultMap_关联查询_association分步查询-->
    <resultMap id="MyEmpByStep" type="com.kaixin8848.home.web.mybatisdemo.pojo.out.EmployeeInfo"
               extends="BaseResultMap">
        <association property="dept" select="com.kaixin8848.home.web.mybatisdemo.dao.DeptMapper.getDeptById"
                     column="d_id">
        </association>
    </resultMap>
    <select id="getEmpByIdStep" resultMap="MyEmpByStep">
        SELECT * FROM employee WHERE id=#{id}
    </select>
    <!--    getEmpsByDeptId-->
    <select id="getEmpsByDeptId" resultMap="BaseResultMap">
       SELECT * FROM employee WHERE d_id=#{deptId}
    </select>

    <!-- =======================鉴别器============================ -->
    <!-- <discriminator javaType=""></discriminator>
        discriminator:音[dɪˈskrɪməˌneɪtər]
        鉴别器：mybatis可以使用discriminator判断某列的值，然后根据某列的值改变封装行为
        封装Employee：
            如果查出的是女生：就把部门信息查询出来，否则不查询；
            如果是男生，把last_name这一列的值赋值给email;
     -->
    <resultMap type="com.kaixin8848.home.web.mybatisdemo.pojo.out.EmployeeInfo" id="MyEmpDis" extends="BaseResultMap">
        <!--
            column：指定判定的列名
            javaType：列值对应的java类型  -->
        <discriminator javaType="string" column="gender">
            <!--女生  resultType:指定封装的结果类型；不能缺少。/resultMap-->
            <case value="0" resultType="com.kaixin8848.home.web.mybatisdemo.pojo.out.EmployeeInfo">
                <association property="dept" select="com.kaixin8848.home.web.mybatisdemo.dao.DeptMapper.getDeptById"
                             column="d_id">
                </association>
            </case>
            <!--男生 ;如果是男生，把last_name这一列的值赋值给email; -->
            <case value="1" resultType="com.kaixin8848.home.web.mybatisdemo.pojo.out.EmployeeInfo">
                <result column="last_name" jdbcType="VARCHAR" property="email"/>
            </case>
        </discriminator>
    </resultMap>
    <select id="getEmpAndDept4" resultMap="MyEmpDis">
        SELECT * FROM employee WHERE id=#{id}
    </select>

    <!--public List<Employee> getEmpsByConditionTrim(Employee employee);  -->
    <select id="getEmpsByConditionTrim" resultMap="BaseResultMap">
        SELECT * FROM employee
        <!-- 后面多出的and或者or where标签不能解决
        prefix="":前缀：trim标签体中是整个字符串拼串 后的结果。
                prefix给拼串后的整个字符串加一个前缀
        prefixOverrides="":
                前缀覆盖： 去掉整个字符串前面多余的字符
        suffix="":后缀
                suffix给拼串后的整个字符串加一个后缀
        suffixOverrides=""
                后缀覆盖：去掉整个字符串后面多余的字符
        -->
        <!-- 自定义字符串的截取规则 -->
        <trim prefix="where" suffixOverrides="and">
            <if test="id!=null">
                id=#{id} and
            </if>
            <if test="lastName!=null and lastName!=''">
                last_name like #{lastName} and
            </if>
            <if test="email!=null and email.trim()!=''">
                email=#{email} and
            </if>
            <!-- ognl会进行字符串与数字的转换判断  "0"==0 -->
            <if test="gender==0 or gender==1">
                gender=#{gender} and
            </if>
        </trim>
    </select>
    <!--动态sql_choose_分支选择-->
    <!--如果带了id就用id查，如果带了lastName就用lastName查;只会进入其中一个-->
    <select id="getEmpsByConditionChoose" resultMap="BaseResultMap">
        SELECT * FROM employee
        <where>
            <choose>
                <when test="id!=null">
                    id=#{id}
                </when>
                <when test="lastName!=null">
                    last_name =#{lastName}
                </when>
                <when test="email!=null">
                    email=#{email}
                </when>
                <otherwise>
                    gender=0
                </otherwise>
            </choose>

        </where>
    </select>
    <!--动态sql_set_与if结合的动态更新-->
    <update id="updateEmpUseSet">
        UPDATE employee
        <set>
            <if test="lastName!=null">
                last_name=#{lastName},
            </if>
            <if test="gender!=null">
                gender=#{gender},
            </if>
            <if test="email!=null">
                email=#{email},
            </if>
            <if test="dId!=null and dId!=0">
                d_id=#{dId},
            </if>
        </set>
        WHERE id=#{id}
    </update>
    <!--动态sql_set_与if结合的动态更新 -->
    <select id="getEmpsByConditionForEach" resultMap="BaseResultMap">
        SELECT * FROM employee WHERE id IN
        <foreach collection="ids" item="item_id" separator=","
                 open="(" close=")">
            #{item_id}
        </foreach>
    </select>
    <!---->
    <!--    <insert id="addEmps">-->
    <!--        INSERT INTO employee(id,last_name,gender,email,d_id)-->
    <!--        VALUES-->
    <!--        <foreach collection="emps" item="emp" separator=",">-->
    <!--            (#{emp.id},#{emp.lastName},#{emp.gender},#{emp.email},#{emp.dId})-->
    <!--        </foreach>-->
    <!--    </insert>-->
    <!-- 为了兼容;必须在配置spring.datasource.url上添加allowMultiQueries=true-->
    <insert id="addEmps">
        <foreach collection="emps" item="emp" separator=";">
            INSERT INTO employee(
            -- 引用外部定义的sql
            <include refid="insertColumn"></include>
            )
            VALUES (#{emp.id},#{emp.lastName},#{emp.gender},#{emp.email},#{emp.dId})
        </foreach>
    </insert>
    <!--动态sql_bind_绑定
    bind:可以将OGNL表达式绑定到一个变量中，方便后面引用这个变量
    -->
    <select id="getEmpsByConditionForBind" resultMap="BaseResultMap">
        <!--      <bind name="_lastName" value="'%'+lastName+'%'"/>-->
        <bind name="_lastName" value="'_'+lastName+'%'"/>
        select * from employee where last_name like #{_lastName}
    </select>
    <!--抽取可重用的SQL片段，方便后面引用-->
    <sql id="insertColumn">
        id,last_name,gender,email,d_id
    </sql>


</mapper>